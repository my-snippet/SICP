;; description reference
;; http://www.billthelizard.com/2010/12/sicp-27-211-extended-exercise-interval.html


(define (mul-interval-9-cases x y)
  (let ((ux (upper-bound x))
		(lx (lower-bound x))
		(uy (upper-bound y))
		(ly (lower-bound y)))
	(let ((case-1 (and (and (> lx 0) (> ux 0))
						(and (> ly 0) (> uy 0))))
		  (case-2 (and (and (> lx 0) (> ux 0))
						(and (< ly 0) (> uy 0))))
		  (case-3 (and (and (> lx 0) (> ux 0))
						(and (< ly 0) (< uy 0))))
		  (case-4 (and (and (< lx 0) (> ux 0))
						(and (> ly 0) (> uy 0))))
		  (case-5 (and (and (< lx 0) (> ux 0))
						(and (< ly 0) (> uy 0))))
		  (case-6 (and (and (< lx 0) (> ux 0))
						(and (< ly 0) (< uy 0))))
		  (case-7 (and (and (< lx 0) (< ux 0))
						(and (> ly 0) (> uy 0))))
		  (case-8 (and (and (< lx 0) (< ux 0))
						(and (< ly 0) (> uy 0))))
		  (case-9 (and (and (< lx 0) (< ux 0))
						(and (< ly 0) (< uy 0)))))
	  (cond (case-1 (make-interval (* lx ly) (* ux uy)))
			(else (make-interval (* lx ly) (* ux uy)))))))
;; ... needed to implement about all cases
